/*
class Player {
    constructor() {
        this.width = 50
        this.height = 20
        this.color = "green"

        //TODO change position according to width and according to height.
        this.position = {
            x: 100,
            y: 100
        }
        
        this.velocity = {
            x: 0,
            y: 0,    
        }
    }
    
    draw(){
        c.beginPath()
        c.rect(this.position.x, this.position.y, this.width, this.height)
        c.fillStyle = this.color
        c.fill()        
    }
    update(){
        this.position.x += this.velocity.x
        this.position.y += this.velocity.y
        this.draw()
    }


}

class Obstacle {
    constructor(width, height, posx, posy) {
        this.width = width
        this.height = height
        this.color = "red"

        //TODO change position according to width and according to height.
        this.position = {
            x: posx,
            y: posy
        }
        
    }
    draw(){
        c.beginPath()           
        c.rect(this.position.x, this.position.y, this.width, this.height)
        c.fillStyle = this.color
        c.fill()        
    }
}


const player = new Player()
const block = new Obstacle(20, 200, 100, 200)

console.log(areRectanglesColliding(player, block))





const keysPressed = {
    "a": false,
    "d": false,
}

let iskeypressed = [false, false, false, false] //wasd

function animate(){

    //0:w   1:a    2:s    3:d
    if (iskeypressed[0] === true && iskeypressed[2] === false){
        player.velocity.y = -2
        if(areRectanglesColliding(player, block)){
            player.velocity.y = 2
        }
    }
    if (iskeypressed[1] === true && iskeypressed[3] === false){
        
        if(areRectanglesColliding(player, block)){
            player.position.x += 4
        } else {
            player.velocity.x = -2
        }
    }
    if (iskeypressed[2] === true && iskeypressed[0] === false){
        player.velocity.y = 2
        if(areRectanglesColliding(player, block)){
            player.velocity.y = -2
        }
    }
    if (iskeypressed[3] === true && iskeypressed[1] === false){
        
        if(areRectanglesColliding(player, block)){
            player.position.x -= 2
        } else {
            player.velocity.x = 2
        }
    }

    if (iskeypressed[0] === false && iskeypressed[2] === false || iskeypressed[0] === true && iskeypressed[2] === true){
        player.velocity.y = 0
    }
    if (iskeypressed[1] === false && iskeypressed[3] === false || iskeypressed[1] === true && iskeypressed[3] === true){
        player.velocity.x = 0
    }



    c.clearRect(0, 0, canvas.width, canvas.height)
    player.update()
    block.draw()
    
    requestAnimationFrame(animate)
    

    
    //console.log(areRectanglesColliding(player, block))
    
}

animate()



addEventListener("keydown", ({key}) => {
    console.log(key)
    switch (key){
        case "w": 
            iskeypressed[0]=true
            break
        case "a": 
            iskeypressed[1]=true
            break   
        case "s": 
            iskeypressed[2]=true
            break
        case "d": 
            iskeypressed[3]=true
            break

        case "ArrowUp": 
            iskeypressed[0]=true
            break
        case "ArrowLeft": 
            iskeypressed[1]=true
            break   
        case "ArrowDown": 
            iskeypressed[2]=true
            break
        case "ArrowRight": 
            iskeypressed[3]=true
            break
                
        case " ":
            const newCircle = circles[0].clone();
            circles.push(newCircle);
            break
    }
})

addEventListener("keyup", ({key}) => {
    console.log(key)
    switch (key){
        case "w": 
            iskeypressed[0]=false
            break
        case "a": 
            iskeypressed[1]=false
            break   
        case "s": 
            iskeypressed[2]=false
            break
        case "d": 
            iskeypressed[3]=false
            break

        case "ArrowUp": 
            iskeypressed[0]=false
            break
        case "ArrowLeft": 
            iskeypressed[1]=false
            break   
        case "ArrowDown": 
            iskeypressed[2]=false
            break
        case "ArrowRight": 
            iskeypressed[3]=false
            break
    }
})

function areRectanglesColliding(rect1, rect2) {
    return (
        rect1.position.x < rect2.position.x + rect2.width &&
        rect1.position.x + rect1.width > rect2.position.x &&
        rect1.position.y < rect2.position.y + rect2.height &&
        rect1.position.y + rect1.height > rect2.position.y
    );
}

function areRectanglesColliding2(rect1, rect2) {
    rect2.width += 2
    rect2.height += 2
    return (
        rect1.position.x < rect2.position.x + rect2.width &&
        rect1.position.x + rect1.width > rect2.position.x &&
        rect1.position.y < rect2.position.y + rect2.height &&
        rect1.position.y + rect1.height > rect2.position.y
    );
}


*/













/*
    class Star {
        constructor() {
            this.position = {
                x: 400,
                y: 500  
            }
            this.img = new Image();  // Erstelle ein neues Image-Objekt
            this.img.src = "star.jpg";   // Setze den Bildpfad
            this.score = 0
        }

        relocate(){
            this.position.x = Math.floor(Math.random() * (2200 - 100 + 1)) + 100 - frameposition.x
            this.position.y = Math.floor(Math.random() * (1400 - 100 + 1)) + 100 - frameposition.y
            const mitte={
                x: this.position.x+15,
                y: this.position.y+15
            }
            for (let i = 0; i < allobstacles.length; i++) {
                if(
                    mitte.x + 15 > allobstacles[i].position.x &&
                    mitte.x - 15 < allobstacles[i].position.x + allobstacles[i].width &&
                    mitte.y + 15 > allobstacles[i].position.y &&
                    mitte.y - 15 < allobstacles[i].position.y + allobstacles[i].height
                ){
                    this.relocate()
                }
            }
            
        }
        
    
        draw() {
            c.drawImage(this.img, this.position.x, this.position.y, 30, 30);  // Zeichne das Bild
        }

        update(){
            this.position.x -= framevelocity.x
            this.position.y -= framevelocity.y

            frameposition.x += framevelocity.x
            frameposition.y += framevelocity.y

            const mitte={
                x: this.position.x+15,
                y: this.position.y+15
            }

            if(
                mitte.x-15 - player.position.x - player.radius < 0 &&
                -mitte.x-15 + player.position.x - player.radius < 0 &&
                mitte.y-15 - player.position.y - player.radius < 0 &&
                -mitte.y-15 + player.position.y - player.radius < 0
            ){
                this.score += 1
                document.getElementById("timer").innerText = this.score
                this.relocate()
            }
        }
    }
    */



    /*
    const allobstacles1 = [
        
        new Obstacle(2300, 200, -100, -100, 0),
        new Obstacle(2300, 200, -100, 1200, 0),
        new Obstacle(200, 1500, -100, -100, 0),
        new Obstacle(200, 1500, 2000, -100, 0),
        
        new Obstacle(200, 200, 100, 100, 0),
        new Obstacle(50, 50, 500, 500, 2),
        
        new Obstacle(400, 400, 600, 0, 0),
        new Obstacle(400, 80, 600, 410, 4),
        new Obstacle(400, 250, 600, 500, 0),

        new Obstacle(50, 80, 1500, 410, 0),
        new Obstacle(100, 400, 1300, 800, 10),
        new Obstacle(400, 100, 1500, 700, 0),

        new Obstacle(300, 300, 1100, 320, 15),

        new Obstacle(30, 30, 380, 1000, 0.1),
        new Obstacle(30, 30, 380, 1030, 0.1),
        new Obstacle(30, 30, 380, 1060, 0.1),
        new Obstacle(30, 30, 410, 1000, 0.1),
        new Obstacle(30, 30, 410, 1030, 0.1),
        new Obstacle(30, 30, 410, 1060, 0.1),
        new Obstacle(30, 30, 440, 1000, 0.1),
        new Obstacle(30, 30, 440, 1030, 0.1),
        new Obstacle(30, 30, 440, 1060, 0.1),

        new Obstacle(50, 50, 680, 1030, 1),
        new Obstacle(50, 50, 750, 1060, 1),



    ];
    */
